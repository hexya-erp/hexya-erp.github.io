<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Hexya</title>
    <link>/docs/</link>
    <description>Recent content in Docs on Hexya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design</title>
      <link>/docs/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/design/</guid>
      <description>This document explains the design choices of Hexya, including the reason why we decided to write Hexya in the first place.
   1. Introduction We used Odoo (http://www.odoo.com) for a few years to fulfil our customers need of business applications. We are great fans of Odoo and managed to create applications for very different businesses, from a 2 people service company to a 500 industrial company.
 However, if Odoo is perfectly fitted for small and medium businesses it does not scale well for bigger companies.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/docs/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/install/</guid>
      <description>Table of Contents 1. Introduction 2. Prerequisites 2.1. Install Go 2.2. Install lessc   3. Download 3.1. Download Hexya 3.2. Download Hexya modules   4. Create a project 4.1. Download Demo Project 4.2. Creating a custom project 4.3. Generate Hexya   5. Synchronise database 5.1. Setup Postgresql 5.2. Synchronise database schema with models   6. Running Hexya   1. Introduction Since Hexya is a modular ERP at compile time, it is only distributed as source code.</description>
    </item>
    
    <item>
      <title>Module Development Tutorial</title>
      <link>/docs/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/tutorial/</guid>
      <description>Table of Contents 1. Prerequisites 2. Start/Stop the Hexya server 3. Build an Hexya module 3.1. Composition of a module 3.2. Module structure   4. Object-Relational Mapping 4.1. Models 4.2. Code generation 4.3. Model fields   5. Resource files 5.1. Actions 5.2. Menus 5.3. Views   6. Basic views 6.1. Generic view declaration 6.2. Form views 6.3. Search views   7. Synchronising the database and starting the server 8.</description>
    </item>
    
    <item>
      <title>Models Reference</title>
      <link>/docs/models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/models/</guid>
      <description>Table of Contents 1. Introduction 2. RecordSets 2.1. Records and RecordSets types 2.2. Using RecordSets 2.3. Common RecordSet Methods   3. Environment 3.1. Environment Methods 3.2. Context Methods 3.3. Executing in a new Environment 3.4. Modifying the Environment 3.5. Direct Database Access   4. Creating / extending models 4.1. Creating a new model 4.2. Fields declaration 4.3. Defining methods 4.4. Extending a model   5. Sequences   1.</description>
    </item>
    
    <item>
      <title>Security Reference</title>
      <link>/docs/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/security/</guid>
      <description>Table of Contents 1. Introduction 1.1. Groups 1.2. Mechanisms 1.3. Permissions   2. Method Execution Control (MEC) 2.1. Rationale 2.2. Defining Method Execution Permissions   3. Field Access Control (FAC) 3.1. Rationale 3.2. Defining Field Access Permissions   4. Record Rules (RR) 4.1. Definition 4.2. Adding or removing Record Rules 4.3. Record Rules combination     1. Introduction Security is implemented in Hexya at the ORM level to limit the risks of inappropriate privilege elevation.</description>
    </item>
    
    <item>
      <title>Internationalization Reference</title>
      <link>/docs/i18n/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/i18n/</guid>
      <description>Table of Contents 1. Introduction 1.1. Available languages   2. Application translation 2.1. Define what needs to be translated 2.2. Extract the PO files 2.3. Translate the strings 2.4. Load back the translation   3. Displaying according to user&amp;#8217;s locale 4. Translating record data   1. Introduction Internationalization in Hexya groups several aspects:
   Translating the application so that the user sees the user interface in his own language.</description>
    </item>
    
    <item>
      <title>Data Reference</title>
      <link>/docs/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/data/</guid>
      <description>Table of Contents 1. Introduction 2. CSV Files 3. Versions 4. Examples   1. Introduction In many cases, it is necessary to include configuration data into the database just for the logic to work. In order to manage the configuration of this data, the Hexya framework provides a way to load data through the use of CSV files.
   2. CSV Files All files that will be put in the data subdirectory of a module will be automatically loaded in the database by alphabetical order, following these rules:</description>
    </item>
    
  </channel>
</rss>